// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TJDBluetoothSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC15TJDBluetoothSDK9DataModel")
@interface DataModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull uuidString;
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 时间戳 单位：秒
@property (nonatomic) NSInteger timeStamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK10BloodModel")
@interface BloodModel : DataModel
@property (nonatomic) NSInteger indexCount;
@property (nonatomic) NSInteger index;
/// 血压高值
@property (nonatomic) NSInteger max;
/// 血压低值
@property (nonatomic) NSInteger min;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC15TJDBluetoothSDK14DisplayUiModel")
@interface DisplayUiModel : NSObject
@property (nonatomic) BOOL isStep;
@property (nonatomic) BOOL isDistance;
@property (nonatomic) BOOL isCal;
@property (nonatomic) BOOL isHeart;
@property (nonatomic) BOOL isBlood;
@property (nonatomic) BOOL isFindPhone;
@property (nonatomic) BOOL isMac;
@property (nonatomic) BOOL isTurnOff;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK10DrinkModel")
@interface DrinkModel : NSObject
/// 分钟
@property (nonatomic) NSInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK17FunctionListModel")
@interface FunctionListModel : NSObject
@property (nonatomic) BOOL hasTurnOff;
@property (nonatomic) BOOL hasStep;
@property (nonatomic) BOOL hasHeart;
@property (nonatomic) BOOL hasBlood;
@property (nonatomic) BOOL hasLightScreen;
@property (nonatomic) BOOL hasLongSit;
@property (nonatomic) BOOL hasDrink;
@property (nonatomic) BOOL hasTakePhoto;
@property (nonatomic) BOOL hasAntiLost;
@property (nonatomic) BOOL hasFindPhone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK19FunctionSwitchModel")
@interface FunctionSwitchModel : NSObject
@property (nonatomic) BOOL isLightScreen;
@property (nonatomic) BOOL isLongSit;
@property (nonatomic) BOOL isDrink;
@property (nonatomic) BOOL isTakePhoto;
/// 电话挂断
@property (nonatomic) BOOL isCallDown;
@property (nonatomic) BOOL isAntiLost;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK10HeartModel")
@interface HeartModel : DataModel
/// 数据总条数
@property (nonatomic) NSInteger indexCount;
/// 第几条数据 从1开始
@property (nonatomic) NSInteger index;
/// 心率值
@property (nonatomic) NSInteger heart;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK12LongSitModel")
@interface LongSitModel : NSObject
/// 分钟
@property (nonatomic) NSInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface NSObject (SWIFT_EXTENSION(TJDBluetoothSDK))
/// 保存对象的所有属性数据
/// \param model 要保存的对象
///
+ (void)setModel:(id _Nonnull)model;
/// 获取对象的所有数据
///
/// returns:
/// <#return value description#>
+ (id _Nonnull)getModel SWIFT_WARN_UNUSED_RESULT;
@end



@class SleepTimeModel;

SWIFT_CLASS("_TtC15TJDBluetoothSDK10SleepModel")
@interface SleepModel : DataModel
/// 数据总条数
@property (nonatomic) NSInteger indexCount;
/// 第几条数据 从0开始
@property (nonatomic) NSInteger index;
/// 1, 2, 3 对应清醒，浅睡，深睡
@property (nonatomic) NSInteger state;
/// 获得睡眠分段数据信息
/// \param array <#array description#>
///
///
/// returns:
/// <#return value description#>
+ (NSArray<SleepTimeModel *> * _Nonnull)sleepTime:(NSArray<SleepModel *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK14SleepTimeModel")
@interface SleepTimeModel : SleepModel
@property (nonatomic) NSInteger sleepTime;
/// 返回一天的详细 清醒时间，浅睡时间，深睡时间  单位：分钟
///
/// returns:
/// array [wake, light, deep]
+ (NSArray<NSNumber *> * _Nonnull)detailSleep:(NSArray<SleepTimeModel *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
/// <#Description#>
/// \param array <#array description#>
///
///
/// returns:
/// 0 - 3对应 差到优
+ (NSInteger)sleepQuality:(NSArray<NSNumber *> * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK9StepModel")
@interface StepModel : DataModel
/// 数据总条数
@property (nonatomic) NSInteger indexCount;
/// 第几条数据 从0开始
@property (nonatomic) NSInteger index;
@property (nonatomic) NSInteger step;
@property (nonatomic) NSInteger distance;
@property (nonatomic) NSInteger cal;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK12WUAlarmClock")
@interface WUAlarmClock : NSObject
@property (nonatomic) NSInteger clockId;
@property (nonatomic) BOOL isOn;
@property (nonatomic) NSInteger weekday;
@property (nonatomic) NSInteger repeatInterval;
@property (nonatomic) NSInteger repeatCount;
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK12WUAppManager")
@interface WUAppManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WUAppManager * _Nonnull shared;)
+ (WUAppManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 控制是否打印
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isDebug;)
+ (BOOL)isDebug SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsDebug:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBPeripheral;
@class WUBleModel;
@class WUUserInfo;
@protocol WristbandSetDelegate;
@class CBCentralManager;
@class NSNumber;
@class CBService;
@class CBCharacteristic;

SWIFT_CLASS("_TtC15TJDBluetoothSDK12WUBleManager")
@interface WUBleManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WUBleManager * _Nonnull shared;)
+ (WUBleManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 如果要过滤设备，请在{startFindBleDevices}之前设置一个已知的字符串
@property (nonatomic, copy) NSString * _Nonnull filterString;
/// 系统里的蓝牙对象
@property (nonatomic, strong) CBPeripheral * _Nullable activePeripheral;
/// 自己封装的蓝牙对象
@property (nonatomic, strong) WUBleModel * _Nonnull activeModel;
/// 蓝牙搜索后的集合
@property (nonatomic, copy) NSArray<WUBleModel *> * _Nonnull bleModels;
@property (nonatomic) BOOL isOn;
@property (nonatomic, readonly) BOOL isConnected;
/// 计步数据
@property (nonatomic) NSInteger step;
@property (nonatomic) NSInteger cal;
@property (nonatomic) NSInteger distance;
/// 睡眠数据 单位 分钟
@property (nonatomic) NSInteger sleep;
/// 电池和充电状态
@property (nonatomic) NSInteger batteryLevel;
/// 该变量接收了手环传来的用户信息。
@property (nonatomic, strong) WUUserInfo * _Nonnull userInfo;
/// 该变量接收了手环传来的设备上是否要显示的UI。
@property (nonatomic, strong) DisplayUiModel * _Nonnull displayUiModel;
/// 该变量接收了手环传来的设备上功能的开关。
@property (nonatomic, strong) FunctionSwitchModel * _Nonnull functionSwitchModel;
/// 该变量接收了手环传来的设备上是否含有该功能。
@property (nonatomic, strong) FunctionListModel * _Nonnull funcListModel;
/// 喝水提醒的时间间隔。
@property (nonatomic, strong) DrinkModel * _Nonnull drinkModel;
/// 久坐提醒的时间间隔。
@property (nonatomic, strong) LongSitModel * _Nonnull longSitModel;
@property (nonatomic, strong) id <WristbandSetDelegate> _Nullable wristbandDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 建立蓝牙管理   ！**************** 只调用一次 ************   ！
- (void)setUpManager;
/// 开始搜索设备 回调通过 scan通知后 查看 bleModels。
- (void)startFindBleDevices;
/// 停止查找设备
- (void)stopFindBleDevices;
/// 连接设备
/// \param peripheral CBPeripheral
///
- (void)connectBleDevice:(CBPeripheral * _Nullable)peripheral;
/// 断开设备
/// \param peripheral CBPeripheral
///
- (void)disconnectBleDevice:(CBPeripheral * _Nullable)peripheral;
/// 重连设备，是保存在activeModel里的uuidString
- (void)reConnectDevice;
/// 通过uuidString获取蓝牙对象
/// \param uuidString String
///
///
/// returns:
/// 蓝牙对象
- (CBPeripheral * _Nullable)retrievePeripheralWith:(NSString * _Nonnull)uuidString SWIFT_WARN_UNUSED_RESULT;
/// 以下方法不要使用, 系统强制要public的方法 ！*************************************** !
/// CBCentralManagerDelegate
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface WUBleManager (SWIFT_EXTENSION(TJDBluetoothSDK))
/// 给手环发送时间
- (void)setTimeForWristband;
/// 获取手环电量
- (void)getBatteryForWristband;
/// 手环语言设置 中文和英文
- (void)setLanguageForWristband;
- (void)setZhiShiForWristband:(WUUserInfo * _Nonnull)model;
- (void)getDeviceInfoForWristband;
- (void)findDeviceForWristband;
- (void)setCameraForWristband:(BOOL)isIn;
/// 拍照成功后回复手环
- (void)responseCameraForWristband;
- (void)getLongSitForWristband;
/// 设置久坐提醒时间间隔
/// \param model <#model description#>
///
- (void)setLongSitForWristband:(LongSitModel * _Nonnull)model;
- (void)getDrinkForWristband;
/// 设置喝水提醒时间间隔
/// \param model <#model description#>
///
- (void)setDrinkForWristband:(DrinkModel * _Nonnull)model;
- (void)getSwitchForWristband;
- (void)setSwitchForWristband:(FunctionSwitchModel * _Nonnull)model;
- (void)getDisplayForWristband;
- (void)setDisplayForWristband:(DisplayUiModel * _Nonnull)model;
- (void)getAlarmForWristband;
- (void)setAlarmForWristband:(WUAlarmClock * _Nonnull)model;
- (void)getUserinfoForWristband;
- (void)setUserinfoForWristband:(WUUserInfo * _Nonnull)model;
/// 获取当前记步
/// \param days 0 - 6 0指今天，6指6天前
///
- (void)getStepWith:(NSInteger)days;
/// 获取分段记步
/// \param days 0 - 6 0指今天，6指6天前
///
- (void)aloneGetStepWith:(NSInteger)days;
/// 当前睡眠
/// \param days 0 - 6 0指今天，6指6天前
///
- (void)getSleepWith:(NSInteger)days;
/// 分段睡眠
/// \param days 0 - 6 0指今天，6指6天前
///
- (void)aloneGetSleepWith:(NSInteger)days;
/// 同步测量数据
/// \param type WristbandMeasureType 结构体内变量
///
- (void)aloneGetMeasure:(uint8_t)type;
/// 开始测量
/// \param type WristbandMeasureType 结构体内变量
///
- (void)startMeasure:(uint8_t)type;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK22WUBleManagerNotifyKeys")
@interface WUBleManagerNotifyKeys : NSObject
/// 蓝牙已关闭通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull off;)
+ (NSNotificationName _Nonnull)off SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙已打开通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull on;)
+ (NSNotificationName _Nonnull)on SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙搜索回调通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull scan;)
+ (NSNotificationName _Nonnull)scan SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙连接回调通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull connected;)
+ (NSNotificationName _Nonnull)connected SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙断开回调通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull disconnected;)
+ (NSNotificationName _Nonnull)disconnected SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK10WUBleModel")
@interface WUBleModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull uuidString;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull localName;
@property (nonatomic) NSInteger rssi;
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 硬件版本
@property (nonatomic, copy) NSString * _Nonnull hardwareVersion;
/// 固件版本
@property (nonatomic, copy) NSString * _Nonnull firmwareVersion;
/// 厂商数据
@property (nonatomic, copy) NSString * _Nonnull vendorNumberASCII;
@property (nonatomic, copy) NSString * _Nonnull vendorNumberString;
/// 内部型号
@property (nonatomic, copy) NSString * _Nonnull internalNumber;
/// YWQ 公司专用设备id
@property (nonatomic, copy) NSString * _Nonnull deviceID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK10WUUserInfo")
@interface WUUserInfo : NSObject
@property (nonatomic) NSInteger uid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) NSInteger sex;
@property (nonatomic) NSInteger age;
@property (nonatomic) double height;
@property (nonatomic) double weight;
@property (nonatomic) NSInteger unit;
@property (nonatomic) NSInteger timeUnit;
@property (nonatomic) NSInteger stepGoal;
@property (nonatomic) NSInteger birthday;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK20WristbandMeasureType")
@interface WristbandMeasureType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint8_t heart;)
+ (uint8_t)heart SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint8_t blood;)
+ (uint8_t)blood SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15TJDBluetoothSDK19WristbandNotifyKeys")
@interface WristbandNotifyKeys : NSObject
/// 手环连接稳定了，可以去读写信息了。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull readyToWrite;)
+ (NSNotificationName _Nonnull)readyToWrite SWIFT_WARN_UNUSED_RESULT;
/// 读取设备基本信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull getDevInfo;)
+ (NSNotificationName _Nonnull)getDevInfo SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取设备制式(公制，英制， 保存在WUUserinfo)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_ZhiShi;)
+ (NSNotificationName _Nonnull)setOrRead_ZhiShi SWIFT_WARN_UNUSED_RESULT;
/// 电量同步
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull syncEle;)
+ (NSNotificationName _Nonnull)syncEle SWIFT_WARN_UNUSED_RESULT;
/// 时间设置/读取
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_Time;)
+ (NSNotificationName _Nonnull)setOrRead_Time SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取设备闹钟
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_Alarm;)
+ (NSNotificationName _Nonnull)setOrRead_Alarm SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取用户参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_UserInfo;)
+ (NSNotificationName _Nonnull)setOrRead_UserInfo SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取要显示的UI界面
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_Display_UI;)
+ (NSNotificationName _Nonnull)setOrRead_Display_UI SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取功能开关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_Switch;)
+ (NSNotificationName _Nonnull)setOrRead_Switch SWIFT_WARN_UNUSED_RESULT;
/// 查找设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull search_Dev;)
+ (NSNotificationName _Nonnull)search_Dev SWIFT_WARN_UNUSED_RESULT;
/// 查找手机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull search_Phone;)
+ (NSNotificationName _Nonnull)search_Phone SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取久坐提醒参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_SitParam;)
+ (NSNotificationName _Nonnull)setOrRead_SitParam SWIFT_WARN_UNUSED_RESULT;
/// 设置/读取喝水提醒参数
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull setOrRead_DrinkParam;)
+ (NSNotificationName _Nonnull)setOrRead_DrinkParam SWIFT_WARN_UNUSED_RESULT;
/// 进入/退出拍照模式
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull inOrExit_TakePhoto;)
+ (NSNotificationName _Nonnull)inOrExit_TakePhoto SWIFT_WARN_UNUSED_RESULT;
/// 响应拍照命令
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull takePhoto;)
+ (NSNotificationName _Nonnull)takePhoto SWIFT_WARN_UNUSED_RESULT;
/// 启动测量模式
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull startCeLiang;)
+ (NSNotificationName _Nonnull)startCeLiang SWIFT_WARN_UNUSED_RESULT;
/// 设备发送心率测量结果
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull devSendCeLiang_heart;)
+ (NSNotificationName _Nonnull)devSendCeLiang_heart SWIFT_WARN_UNUSED_RESULT;
/// 设备发送血压测量结果
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull devSendCeLiang_blood;)
+ (NSNotificationName _Nonnull)devSendCeLiang_blood SWIFT_WARN_UNUSED_RESULT;
/// 历史心率同步
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull sysCeLiang_heart;)
+ (NSNotificationName _Nonnull)sysCeLiang_heart SWIFT_WARN_UNUSED_RESULT;
/// 历史血压同步
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull sysCeLiang_blood;)
+ (NSNotificationName _Nonnull)sysCeLiang_blood SWIFT_WARN_UNUSED_RESULT;
/// 读取当天运动数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull read_Sport;)
+ (NSNotificationName _Nonnull)read_Sport SWIFT_WARN_UNUSED_RESULT;
/// 读取历史运动数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull read_All_Sport;)
+ (NSNotificationName _Nonnull)read_All_Sport SWIFT_WARN_UNUSED_RESULT;
/// 读取当天睡眠数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull read_Sleep;)
+ (NSNotificationName _Nonnull)read_Sleep SWIFT_WARN_UNUSED_RESULT;
/// 读取历史睡眠数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull read_All_Sleep;)
+ (NSNotificationName _Nonnull)read_All_Sleep SWIFT_WARN_UNUSED_RESULT;
/// 同步手机系统语言 1中文，0英文
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull syncLanguage;)
+ (NSNotificationName _Nonnull)syncLanguage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 这个协议是发送数据后，手环返回确认的。
SWIFT_PROTOCOL("_TtP15TJDBluetoothSDK20WristbandSetDelegate_")
@protocol WristbandSetDelegate
@optional
/// 手环收到设置时间后回复
/// \param isSuccess yes 成功 no 失败
///
- (void)didSetWristbandWithTime:(BOOL)isSuccess;
/// 手环收到设置闹钟后回复
/// \param isSuccess isSuccess: yes 成功 no 失败
///
/// \param index 闹钟序号id
///
- (void)didSetWristbandWithAlarm:(BOOL)isSuccess index:(NSInteger)index;
/// 用户给手环设置用户信息后手环回复
- (void)didSetWristbandWithUserinfo:(BOOL)isSuccess;
/// 用户设置手环的显示UI后回复
- (void)didSetWristbandWithDisplayUi:(BOOL)isSuccess;
/// 用户设置手环的功能开关后回复
- (void)didSetWristbandWithSwitch:(BOOL)isSuccess;
/// 手机查找手环后回复
- (void)didSetWristbandWithFindDevice:(BOOL)isSuccess;
/// 设置久坐提醒时间后回复
- (void)didSetWristbandWithLongSit:(BOOL)isSuccess;
/// 设置喝水提醒后回复
- (void)didSetWristbandWithDrink:(BOOL)isSuccess;
/// 手机给手环发送进入了拍照界面后回复
/// \param isSuccess 手环启动拍照页面成功或失败
///
/// \param isEnter 是否进入了拍照界面
///
- (void)didSetWristbandWithCamera:(BOOL)isSuccess isEnter:(BOOL)isEnter;
/// 发送开始测量后手环回复
/// \param isSuccess 启动测量成功
///
/// \param type WristbandMeasureType.heart or  blood
///
- (void)didSetWristbandWithStartMeasure:(BOOL)isSuccess type:(uint8_t)type;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
